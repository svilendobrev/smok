--- old/Python/ast.c	2010-11-30 11:41:01.000000000 +0200
+++ new/Python/ast.c	2011-07-11 18:28:59.000000000 +0300
@@ -14,6 +14,15 @@
 
 #include <assert.h>
 
+static const char bg_else[]     = "иначе";
+static const char bg_elif[]     = "инако";
+static const char bg_in[]       = "във";
+static const char bg_and[]      = "и";
+static const char bg_is[]       = "е";
+static const char bg_finally[]  = "винаги";
+#define streq( x, name) ( !strcmp( x, #name) || !strcmp( x, bg_##name) )
+
+
 /* Data structure used internally */
 struct compiling {
     char *c_encoding; /* source encoding */
@@ -374,6 +383,34 @@
     NULL,
 };
 
+static const Py_UNICODE ubgNone[] = { 1053, 1080, 1097, 1086, 0};
+static const Py_UNICODE ubgTrue[] = { 1044, 1072, 0};
+static const Py_UNICODE ubgFalse[]= { 1053, 1077, 0};
+
+static const Py_UNICODE * uFORBIDDEN[] = {
+    ubgNone,
+    ubgTrue,
+    ubgFalse,
+    NULL
+};
+
+int
+PyUnicode_CompareWithUnicode( PyObject* uni, const Py_UNICODE * str)
+{   /* same as PyUnicode_CompareWithASCIIString */
+    int i;
+    Py_UNICODE *id;
+    assert(PyUnicode_Check(uni));
+    id = PyUnicode_AS_UNICODE(uni);
+    for (i = 0; id[i] && str[i]; i++)
+        if (id[i] != str[i])
+            return (id[i] < str[i]) ? -1 : 1;
+    if (PyUnicode_GET_SIZE(uni) != i || id[i])
+        return 1; /* uni is longer */
+    if (str[i])
+        return -1; /* str is longer */
+    return 0;
+}
+
 static int
 forbidden_name(identifier name, const node *n, int full_checks)
 {
@@ -390,6 +427,13 @@
                 return 1;
             }
         }
+        const Py_UNICODE **u;
+        for (u = uFORBIDDEN; *u; u++) {
+            if (PyUnicode_CompareWithUnicode( name, *u) ==0) {
+                ast_error(n, "assignment to keyword");
+                return 1;
+            }
+        }
     }
     return 0;
 }
@@ -585,9 +629,9 @@
             case NOTEQUAL:
                 return NotEq;
             case NAME:
-                if (strcmp(STR(n), "in") == 0)
+                if (streq(STR(n), in))
                     return In;
-                if (strcmp(STR(n), "is") == 0)
+                if (streq(STR(n), is))
                     return Is;
             default:
                 PyErr_Format(PyExc_SystemError, "invalid comp_op: %s",
@@ -599,9 +643,9 @@
         /* handle "not in" and "is not" */
         switch (TYPE(CHILD(n, 0))) {
             case NAME:
-                if (strcmp(STR(CHILD(n, 1)), "in") == 0)
+                if (streq(STR(CHILD(n, 1)), in))
                     return NotIn;
-                if (strcmp(STR(CHILD(n, 0)), "is") == 0)
+                if (streq(STR(CHILD(n, 0)), is))
                     return IsNot;
             default:
                 PyErr_Format(PyExc_SystemError, "invalid comp_op: %s %s",
@@ -1816,10 +1860,10 @@
                     return NULL;
                 asdl_seq_SET(seq, i / 2, e);
             }
-            if (!strcmp(STR(CHILD(n, 1)), "and"))
+            if (streq(STR(CHILD(n, 1)), and))
                 return BoolOp(And, seq, LINENO(n), n->n_col_offset,
                               c->c_arena);
-            assert(!strcmp(STR(CHILD(n, 1)), "or"));
+            assert( streq(STR(CHILD(n, 1)), or));
             return BoolOp(Or, seq, LINENO(n), n->n_col_offset, c->c_arena);
         case not_test:
             if (NCH(n) == 1) {
@@ -2633,6 +2677,7 @@
     return seq;
 }
 
+
 static stmt_ty
 ast_for_if_stmt(struct compiling *c, const node *n)
 {
@@ -2663,7 +2708,7 @@
        's' for el_s_e, or
        'i' for el_i_f
     */
-    if (s[2] == 's') {
+    if (streq( s, else)) {
         expr_ty expression;
         asdl_seq *seq1, *seq2;
 
@@ -2680,7 +2725,7 @@
         return If(expression, seq1, seq2, LINENO(n), n->n_col_offset,
                   c->c_arena);
     }
-    else if (s[2] == 'i') {
+    else if (streq( s, elif)) {
         int i, n_elif, has_else = 0;
         expr_ty expression;
         asdl_seq *suite_seq;
@@ -2689,7 +2734,7 @@
         /* must reference the child n_elif+1 since 'else' token is third,
            not fourth, child from the end. */
         if (TYPE(CHILD(n, (n_elif + 1))) == NAME
-            && STR(CHILD(n, (n_elif + 1)))[2] == 's') {
+            && streq( STR(CHILD(n, (n_elif + 1))), else)) {
             has_else = 1;
             n_elif -= 3;
         }
@@ -2901,7 +2946,7 @@
         return NULL;
 
     if (TYPE(CHILD(n, nch - 3)) == NAME) {
-        if (strcmp(STR(CHILD(n, nch - 3)), "finally") == 0) {
+        if (streq(STR(CHILD(n, nch - 3)), finally)) {
             if (nch >= 9 && TYPE(CHILD(n, nch - 6)) == NAME) {
                 /* we can assume it's an "else",
                    because nch >= 9 for try-else-finally and
